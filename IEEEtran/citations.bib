@article{BogaertsBart2014Sdsu,
issn = "1471-0684",
journal = "Theory and Practice of Logic Programming",
pages = "477--492",
volume = "14",
number = "4-5",
year = "2014",
title = "Simulating dynamic systems using linear time calculus theories",
language = "eng",
author = "Bogaerts, Bart",
url = "https://lirias.kuleuven.be/bitstream/123456789/451582/1/\\SimulatingDynamicSystemsUsingLTC.pdf",
}

@article{DeCatBroes2014PLaa,
	abstract = "With the technology of the time, Kowalski's seminal 1974 paper {\em Predicate Logic as a Programming Language} was a breakthrough for the use of logic in computer science. It introduced two fundamental ideas: on the declarative side, the use of the Horn clause logic fragment of classical logic, which was soon extended with negation as failure, on the procedural side the procedural interpretation which made it possible to write algorithms in the formalism. Since then, strong progress was made both on the declarative understanding of the logic programming formalism and in automated reasoning technologies, particularly in SAT solving, Constraint Programming and Answer Set Programming. This has paved the way for the development of an extension of logic programming that embodies a more pure view of logic as a modelling language and its role for problem solving. In this paper, we present the \idp language and system. The language is essentially classical logic extended with one of logic programmings most important contributions to knowledge representation: the representation of complex definitions as rule sets under well-founded semantics. The system is a knowledge base system: a system in which complex declarative information is stored in a knowledge base which can be used to solve different computational problems by applying multiple forms of inference. In this view, theories are declarative modellings, bags of information, descriptions of possible states of affairs. They are neither procedures nor descriptions of computational problems. As such, the \idp language and system preserve the fundamental idea of a declarative reading of logic programs, while they break with the fundamental idea of the procedural interpretation of logic programs.",
	year = "2014",
	title = "Predicate Logic as a Modelling Language: The IDP System",
	author = "De Cat, Broes and Bogaerts, Bart and Bruynooghe, Maurice and Janssens, Gerda and Denecker, Marc",
	keywords = "Computer Science - Logic In Computer Science",
	month = "January",
}

@article{BerardiDaniela2005RoUc,
	issn = "0004-3702",
	abstract = "UML is the de-facto standard formalism for software design and analysis. To support the design of large-scale industrial applications, sophisticated CASE tools are available on the market, that provide a user-friendly environment for editing, storing, and accessing multiple UML diagrams. It would be highly desirable to equip such CASE tools with automated reasoning capabilities, such as those studied in Artificial Intelligence and, in particular, in Knowledge Representation and Reasoning. Such capabilities would allow to automatically detect relevant formal properties of UML diagrams, such as inconsistencies or redundancies. With regard to this issue, we consider UML class diagrams, which are one of the most important components of UML, and we address the problem of reasoning on such diagrams. We resort to several results developed in the field of Knowledge Representation and Reasoning, regarding Description Logics (DLs), a family of logics that admit decidable reasoning procedures. Our first contribution is to show that reasoning on UML class diagrams is EXPTIME-hard, even under restrictive assumptions; we prove this result by showing a polynomial reduction from reasoning in DLs. The second contribution consists in establishing EXPTIME-membership of reasoning on UML class diagrams, provided that the use of arbitrary OCL (first-order) constraints is disallowed. We get this result by using DLR ifd , a very expressive EXPTIME-decidable DL that has been developed to capture typical features of conceptual and object-oriented data models. The last contribution has a more practical flavor, and consists in a polynomial encoding of UML class diagrams in the DL ALCQI , which essentially is the most expressive DL supported by current state-of-the-art DL-based reasoning systems. Though less expressive than DLR ifd , the DL ALCQI preserves enough semantics to keep reasoning about UML class diagrams sound and complete. Exploiting such an encoding, one can use current DL-based reasoning systems as core reasoning engines for a next generation of CASE tools, that are equipped with reasoning capabilities on UML class diagrams.",
	journal = "Artificial Intelligence",
	pages = "70--118",
	volume = "168",
	publisher = "Elsevier B.V.",
	number = "1",
	year = "2005",
	title = "Reasoning on UML class diagrams",
	language = "eng",
	author = "Berardi, Daniela and Calvanese, Diego and De Giacomo, Giuseppe",
	keywords = "Knowledge Representation ; Description Logics ; Uml Class Diagrams ; Computational Complexity ; Verification ; CASE Tools",
}

@inproceedings{KuhlmannMirco2012FUaO,
	series = "MODELS'12",
	abstract = "<p><p>Languages like UML and OCL are used to precisely model systems. Complex UML and OCL models therefore represent a crucial part of model-driven development, as they formally specify the main system properties. Consequently, creating complete and correct models is a critical concern. For this purpose, we provide a lightweight model validation method based on efficient SAT solving techniques. In this paper, we present a transformation from UML class diagram and OCL concepts into relational logic. Relational logic in turn represents the source for advanced SAT-based model instance finders like Kodkod. This paper focuses on a natural transformation approach which aims to exploit the features of relational logic as directly as possible through straitening the handling of main UML and OCL features. This approach allows us to explicitly benefit from the efficient handling of relational logic in Kodkod and to interpret found results backwards in terms of UML and OCL.</p></p>",
	pages = "415--431",
	publisher = "Springer-Verlag",
	booktitle = "Proceedings of the 15th international conference on model driven engineering languages and systems",
	isbn = "9783642336652",
	year = "2012",
	title = "From UML and OCL to relational logic and back",
	language = "eng",
	author = "Kuhlmann, Mirco and Gogolla, Martin",
	keywords = "Computer Science",
	month = "September",
}

@article{RamalhoFranklin2004CTFL,
	issn = "1571-0661",
	abstract = "We propose Concurrent Transaction Frame Logic (CTFL) as a language to provide formal semantics to UML activity and class diagrams. CTFL extends first-order Horn logic with object-oriented class hierarchy and object definition terms, and with five new logical connectives that declaratively capture temporal and concurrency constraints on updates and transactions. CTFL has coinciding, sound and refutation complete proof and model theories. CTFL allows using a single language to (1) formally describe the semantics of both activity and class diagrams, (2) verify UML models based on these two diagrams using theorem proving and (3) implement the model as an executable, object-oriented logic program.",
	journal = "Electronic Notes in Theoretical Computer Science",
	pages = "83--109",
	volume = "95",
	publisher = "Elsevier B.V.",
	year = "2004",
	title = "Concurrent Transaction Frame Logic Formal Semantics for UML Activity and Class Diagrams",
	language = "eng",
	author = "Ramalho, Franklin and Robin, Jacques and Schiel, Ulrich",
	keywords = "Uml Semantics ; Object-Oriented Logic Programming ; Concurrent Transaction Logic ; Frame Logic",
	month = "May",
}

@book{WarmerJosB1999Ocl:,
	series = "Addison-Wesley object technology series",
	publisher = "Addison-Wesley",
	isbn = "0201379406",
	year = "1999",
	title = "Object constraint language : precise modeling with UML",
	edition = "2nd print.",
	address = "Reading (Mass.)",
	author = "Warmer, Jos B and Kleppe, Anneke G",
	keywords = "Software engineering: protection mechanisms; standards--See also {681.3*K63}; {681.3*K51}",
}

@InProceedings{10.1007/978-3-540-71209-1_49,
	author="Torlak, Emina
	and Jackson, Daniel",
	editor="Grumberg, Orna
	and Huth, Michael",
	title="Kodkod: A Relational Model Finder",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="632--647",
	abstract="The key design challenges in the construction of a SAT-based relational model finder are described, and novel techniques are proposed to address them. An efficient model finder must have a mechanism for specifying partial solutions, an effective symmetry detection and breaking scheme, and an economical translation from relational to boolean logic. These desiderata are addressed with three new techniques: a symmetry detection algorithm that works in the presence of partial solutions, a sparse-matrix representation of relations, and a compact representation of boolean formulas inspired by boolean expression diagrams and reduced boolean circuits. The presented techniques have been implemented and evaluated, with promising results.",
	isbn="978-3-540-71209-1"
}

@book{RumbaughJames2005Tuml,
	series = "Addison-Wesley object technology series",
	publisher = "Addison-Wesley",
	isbn = "0321245628",
	year = "2005",
	title = "The unified modeling language reference manual",
	edition = "2nd ed.",
	address = "Boston",
	author = "Rumbaugh, James and Jacobson, Ivar and Booch, Grady",
	keywords = "Requirements/specifications: languages; methodologies; tools (Software engineering)--See also {681.3*D31}",
}

@inproceedings{kifer1996concurrency,
	title={Concurrency and communication in transaction logic},
	author={Kifer, Michael},
	booktitle={Logic Programming: Proceedings of the 1996 Joint International Conference and Symposium on Logic Programming},
	volume={13},
	pages={142},
	year={1996},
	organization={MIT Press}
}

@inproceedings{kifer1995deductive,
	title={Deductive and object data languages: A quest for integration},
	author={Kifer, Michael},
	booktitle={International Conference on Deductive and Object-Oriented Databases},
	pages={187--212},
	year={1995},
	organization={Springer}
}

@Article{Balaban2015,
	author="Balaban, Mira
	and Maraee, Azzam
	and Sturm, Arnon
	and Jelnov, Pavel",
	title="A pattern-based approach for improving model quality",
	journal="Software {\&} Systems Modeling",
	year="2015",
	month="Oct",
	day="01",
	volume="14",
	number="4",
	pages="1527--1555",
	abstract="UML class diagrams play a central role in modeling activities, and it is essential that class diagrams keep their high quality all along a product life cycle. Correctness problems in class diagrams are mainly caused by complex interactions among class-diagram constraints. Detection, identification, and repair of such problems require background training. In order to improve modelers' capabilities in these directions, we have constructed a catalog of anti-patterns of correctness and quality problems in class diagrams, where an anti-pattern analyzes a typical constraint interaction that causes a correctness or a quality problem and suggests possible repairs. This paper argues that exposure to correctness anti-patterns improves modeling capabilities. The paper introduces the catalog and its pattern language, and describes experiments that test the impact of awareness to modeling problems in class diagrams (via concrete examples and anti-patterns) on the analysis capabilities of modelers. The experiments show that increased awareness implies increased identification. The improvement is remarkably noticed when the awareness is stimulated by anti-patterns, rather than by concrete examples.",
	issn="1619-1374",
	doi="10.1007/s10270-013-0390-0",
	url="https://doi.org/10.1007/s10270-013-0390-0"
}
