@article{BogaertsBart2014Sdsu,
issn = "1471-0684",
journal = "Theory and Practice of Logic Programming",
pages = "477--492",
volume = "14",
number = "4-5",
year = "2014",
title = "Simulating dynamic systems using linear time calculus theories",
language = "eng",
author = "Bogaerts, Bart",
url = "https://lirias.kuleuven.be/bitstream/123456789/451582/1/SimulatingDynamicSystemsUsingLTC.pdf",
}

@article{BerardiDaniela2005RoUc,
	issn = "0004-3702",
	abstract = "UML is the de-facto standard formalism for software design and analysis. To support the design of large-scale industrial applications, sophisticated CASE tools are available on the market, that provide a user-friendly environment for editing, storing, and accessing multiple UML diagrams. It would be highly desirable to equip such CASE tools with automated reasoning capabilities, such as those studied in Artificial Intelligence and, in particular, in Knowledge Representation and Reasoning. Such capabilities would allow to automatically detect relevant formal properties of UML diagrams, such as inconsistencies or redundancies. With regard to this issue, we consider UML class diagrams, which are one of the most important components of UML, and we address the problem of reasoning on such diagrams. We resort to several results developed in the field of Knowledge Representation and Reasoning, regarding Description Logics (DLs), a family of logics that admit decidable reasoning procedures. Our first contribution is to show that reasoning on UML class diagrams is EXPTIME-hard, even under restrictive assumptions; we prove this result by showing a polynomial reduction from reasoning in DLs. The second contribution consists in establishing EXPTIME-membership of reasoning on UML class diagrams, provided that the use of arbitrary OCL (first-order) constraints is disallowed. We get this result by using DLR ifd , a very expressive EXPTIME-decidable DL that has been developed to capture typical features of conceptual and object-oriented data models. The last contribution has a more practical flavor, and consists in a polynomial encoding of UML class diagrams in the DL ALCQI , which essentially is the most expressive DL supported by current state-of-the-art DL-based reasoning systems. Though less expressive than DLR ifd , the DL ALCQI preserves enough semantics to keep reasoning about UML class diagrams sound and complete. Exploiting such an encoding, one can use current DL-based reasoning systems as core reasoning engines for a next generation of CASE tools, that are equipped with reasoning capabilities on UML class diagrams.",
	journal = "Artificial Intelligence",
	pages = "70--118",
	volume = "168",
	publisher = "Elsevier B.V.",
	number = "1",
	year = "2005",
	title = "Reasoning on UML class diagrams",
	language = "eng",
	author = "Berardi, Daniela and Calvanese, Diego and De Giacomo, Giuseppe",
	keywords = "Knowledge Representation ; Description Logics ; Uml Class Diagrams ; Computational Complexity ; Verification ; CASE Tools",
}

@inproceedings{KuhlmannMirco2012FUaO,
	series = "MODELS'12",
	abstract = "<p><p>Languages like UML and OCL are used to precisely model systems. Complex UML and OCL models therefore represent a crucial part of model-driven development, as they formally specify the main system properties. Consequently, creating complete and correct models is a critical concern. For this purpose, we provide a lightweight model validation method based on efficient SAT solving techniques. In this paper, we present a transformation from UML class diagram and OCL concepts into relational logic. Relational logic in turn represents the source for advanced SAT-based model instance finders like Kodkod. This paper focuses on a natural transformation approach which aims to exploit the features of relational logic as directly as possible through straitening the handling of main UML and OCL features. This approach allows us to explicitly benefit from the efficient handling of relational logic in Kodkod and to interpret found results backwards in terms of UML and OCL.</p></p>",
	pages = "415--431",
	publisher = "Springer-Verlag",
	booktitle = "Proceedings of the 15th international conference on model driven engineering languages and systems",
	isbn = "9783642336652",
	year = "2012",
	title = "From UML and OCL to relational logic and back",
	language = "eng",
	author = "Kuhlmann, Mirco and Gogolla, Martin",
	keywords = "Computer Science",
	month = "September",
}

@book{WarmerJosB1999Ocl:,
	series = "Addison-Wesley object technology series",
	publisher = "Addison-Wesley",
	isbn = "0201379406",
	year = "1999",
	title = "Object constraint language : precise modeling with UML",
	edition = "2nd print.",
	address = "Reading (Mass.)",
	author = "Warmer, Jos B and Kleppe, Anneke G",
	keywords = "Software engineering: protection mechanisms; standards--See also {681.3*K63}; {681.3*K51}",
}

@InProceedings{10.1007/978-3-540-71209-1_49,
	author="Torlak, Emina
	and Jackson, Daniel",
	editor="Grumberg, Orna
	and Huth, Michael",
	title="Kodkod: A Relational Model Finder",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="632--647",
	abstract="The key design challenges in the construction of a SAT-based relational model finder are described, and novel techniques are proposed to address them. An efficient model finder must have a mechanism for specifying partial solutions, an effective symmetry detection and breaking scheme, and an economical translation from relational to boolean logic. These desiderata are addressed with three new techniques: a symmetry detection algorithm that works in the presence of partial solutions, a sparse-matrix representation of relations, and a compact representation of boolean formulas inspired by boolean expression diagrams and reduced boolean circuits. The presented techniques have been implemented and evaluated, with promising results.",
	isbn="978-3-540-71209-1"
}
