include<LTC>
include<table_utils>

LTCvocabulary V {
    type Time isa nat
    Start : Time
    partial Next(Time) : Time

    type SDPoint constructed from { play_1, play_2, play_3, play_4, play_5, play_6, play_7, finished }
    partial NextSD(SDPoint) : SDPoint
    
    type Game
    type Heap
    
    type LimitedInt isa int
    type StackLevel = { 1..10 } isa nat
    type boolean constructed from { T, F }
    
    SDPointAt(Time, SDPoint) -- make a function
    I_SDPointAt(SDPoint)
    C_SDPointAt(Time, SDPoint)
    
    PlayerNumT(Time, StackLevel, LimitedInt)
    I_PlayerNumT(StackLevel, LimitedInt)
    C_PlayerNumT(Time, StackLevel, LimitedInt)
    
    GameT(Time, StackLevel, Game)
    I_GameT(StackLevel, Game)
    C_GameT(Time, StackLevel, Game)
    
    HeapT(Time, StackLevel, Heap)
    I_HeapT(StackLevel, Heap)
    C_HeapT(Time, StackLevel, Heap)
    
    TakeNumT(Time, StackLevel, LimitedInt)
    I_TakeNumT(StackLevel, LimitedInt)
    C_TakeNumT(Time, StackLevel, LimitedInt)
    
    GameturnOf(Time, Game, LimitedInt)
    I_GameturnOf(Game, LimitedInt)
    C_GameturnOf(Time, Game,  LimitedInt)
    Cn_GameturnOf(Time, Game, LimitedInt)
    
    Gamefinished(Time, Game, boolean)
    I_Gamefinished(Game, boolean)
    C_Gamefinished(Time, Game, boolean)
    Cn_Gamefinished(Time, Game, boolean)
    
    HeapamountObjects(Time, Heap, LimitedInt)
    I_HeapamountObjects(Heap, LimitedInt)
    C_HeapamountObjects(Time, Heap, LimitedInt)
    Cn_HeapamountObjects(Time, Heap, LimitedInt)
    
    CurrentStackLevel(Time) : StackLevel
    I_CurrentStackLevel : StackLevel
    C_CurrentStackLevel(Time, StackLevel)
    
    GameandHeap(Game, Heap)
    partial GameFirstHeap(Game) : Heap
    partial GameGetHeap(Game, LimitedInt) : Heap
    partial GameNextHeap(Game, Heap) : Heap
    
    ChosenHeap(Time, Heap)
    ChosenTake(Time, LimitedInt)
}

theory T:V {
    {
        ! t [Time] st [StackLevel] g [Game] n [LimitedInt] : C_GameturnOf(Next(t), g, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_2) & GameT(t, st, g) & PlayerNumT(t, st, n).
        ! t [Time] st [StackLevel] g [Game] n [LimitedInt] : Cn_GameturnOf(Next(t), g, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_2) & GameturnOf(t, g, n) & GameT(t, st, g) & ~( ? n1 [LimitedInt] : PlayerNumT(t, st, n1) & ~(n = n1)).
    
        ! t [Time] st [StackLevel] g [Game] n [LimitedInt] : C_GameturnOf(Next(t), g, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_6) & GameT(t, st, g) & ( ? n1 [LimitedInt] : GameturnOf(t, g, n1) & n = (n1 + 1) % 2).
        ! t [Time] st [StackLevel] g [Game] n [LimitedInt] : Cn_GameturnOf(Next(t), g, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_6) & GameT(t, st, g) & GameturnOf(t, g, n).
        
        ! t [Time] st [StackLevel] g [Game] : C_Gamefinished(Next(t), g, T) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_7) & GameT(t, st, g).
        ! t [Time] st [StackLevel] g [Game] : Cn_Gamefinished(Next(t), g, F) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_7).
        
        ! t [Time] st [StackLevel] h [Heap] n [LimitedInt] : C_HeapamountObjects(Next(t), h, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_5) & HeapT(t, st, h) & ( ? n1 [LimitedInt] n2 [LimitedInt] : HeapamountObjects(t, h, n1) & TakeNumT(t, st, n2) & n = n1 - n2).
        ! t [Time] st [StackLevel] h [Heap] n [LimitedInt] : Cn_HeapamountObjects(Next(t), h, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_5) & HeapT(t, st, h) & HeapamountObjects(t, h, n) & ~( ? n1 [LimitedInt] n2 [LimitedInt] : HeapamountObjects(t, h, n1) & TakeNumT(t, st, n2) & n = n1 - n2).
        
        ! t [Time] s [SDPoint] : C_SDPointAt(Next(t), NextSD(s)) <- SDPointAt(t, s) & ~((s = play_2) | (s = play_6)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), play_3) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, play_2) | SDPointAt(t, play_6)) & ~( ? g [Game] : GameT(t, st, g) & ( ! h [Heap] : GameandHeap(g, h) => ( ? n [LimitedInt] : HeapamountObjects(t, h, n) & n = 0))).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), play_7) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_6) & ( ? g [Game] : GameT(t, st, g) & ( ! h [Heap] n [LimitedInt] : GameandHeap(g, h) & HeapamountObjects(t, h, n) => n = 0)).
        
        ! t [Time] st [StackLevel] g [Game] : C_GameT(t, st, g) <- false.
        ! t [Time] st [StackLevel] n [LimitedInt] : C_PlayerNumT(t, st, n) <- false.
        
        ! t [Time] st [StackLevel] h [Heap] : C_HeapT(Next(t), st, h) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_3) & ChosenHeap(t, h).
        ! t [Time] st [StackLevel] n [LimitedInt] : C_TakeNumT(Next(t), st, n) <- (CurrentStackLevel(t) = st) & SDPointAt(t, play_4) & ChosenTake(t, n).
        
        ! t [Time] st [StackLevel] : C_CurrentStackLevel(t, st) <- false.
    }
    
    {
        ! s [SDPoint] : SDPointAt(Start, s) <- I_SDPointAt(s).
        ! t [Time] s [SDPoint] : SDPointAt(t, s) <- C_SDPointAt(t, s).
        ! t [Time] s [SDPoint] : SDPointAt(Next(t), s) <- SDPointAt(t, s) & ~( ? s1 [SDPoint] : C_SDPointAt(Next(t), s1) & ~(s = s1)).
        
        ! st [StackLevel] g [Game] : GameT(Start, st, g) <- I_GameT(st, g).
        ! t [Time] st [StackLevel] g [Game] : GameT(t, st, g) <- C_GameT(t, st, g).
        ! t [Time] st [StackLevel] g [Game] : GameT(Next(t), st, g) <- GameT(t, st, g) & ~( ? g1 [Game] : C_GameT(t, st, g1) & ~(g = g1)).
        
        ! st [StackLevel] n [LimitedInt] : PlayerNumT(Start, st, n) <- I_PlayerNumT(st, n).
        ! t [Time] st [StackLevel] n [LimitedInt] : PlayerNumT(t, st, n) <- C_PlayerNumT(t, st, n).
        ! t [Time] st [StackLevel] n [LimitedInt] : PlayerNumT(Next(t), st, n) <- PlayerNumT(t, st, n) & ~( ? n1 [LimitedInt] : C_PlayerNumT(t, st, n1) & ~(n = n1)).
        
        ! st [StackLevel] h [Heap] : HeapT(Start, st, h) <- I_HeapT(st, h).
        ! t [Time] st [StackLevel] h [Heap] : HeapT(t, st, h) <- C_HeapT(t, st, h).
        ! t [Time] st [StackLevel] h [Heap] : HeapT(Next(t), st, h) <- HeapT(t, st, h) & ~( ? h1 [Heap] : C_HeapT(Next(t), st, h1) & ~(h = h1)).
        
        ! st [StackLevel] n [LimitedInt] : TakeNumT(Start, st, n) <- I_TakeNumT(st, n).
        ! t [Time] st [StackLevel] n [LimitedInt] : TakeNumT(t, st, n) <- C_TakeNumT(t, st, n).
        ! t [Time] st [StackLevel] n [LimitedInt] : TakeNumT(Next(t), st, n) <- TakeNumT(t, st, n) & ~( ? n1 [LimitedInt] : C_TakeNumT(Next(t), st, n1) & ~(n = n1)).
        
        
        ! h [Heap] n [LimitedInt] : HeapamountObjects(Start, h, n) <- I_HeapamountObjects(h, n).
        ! t [Time] h [Heap] n [LimitedInt] : HeapamountObjects(t, h, n) <- C_HeapamountObjects(t, h, n).
        ! t [Time] h [Heap] n [LimitedInt] : HeapamountObjects(Next(t), h, n) <- HeapamountObjects(t, h, n) & ~Cn_HeapamountObjects(Next(t), h, n).
        
        ! g [Game] n [LimitedInt] : GameturnOf(Start, g, n) <- I_GameturnOf(g, n).
        ! t [Time] g [Game] n [LimitedInt] : GameturnOf(t, g, n) <- C_GameturnOf(t, g, n).
        ! t [Time] g [Game] n [LimitedInt] : GameturnOf(Next(t), g, n) <- GameturnOf(t, g, n) & ~Cn_GameturnOf(Next(t), g, n).
        
        ! g [Game] b [boolean] : Gamefinished(Start, g, b) <- I_Gamefinished(g, b).
        ! t [Time] g [Game] b [boolean] : Gamefinished(t, g, b) <- C_Gamefinished(t, g, b).
        ! t [Time] g [Game] b [boolean] : Gamefinished(Next(t), g, b) <- Gamefinished(t, g, b) & ~Cn_Gamefinished(Next(t), g, b).
        
        
        ! st [StackLevel] : CurrentStackLevel(Start) = st <- I_CurrentStackLevel = st.
        ! t [Time] st [StackLevel] : CurrentStackLevel(t) = st <- C_CurrentStackLevel(t, st).
        ! t [Time] st [StackLevel] : CurrentStackLevel(Next(t)) = st <- CurrentStackLevel(t) = st & ~(? st1 [StackLevel] : C_CurrentStackLevel(Next(t), st1)).
    }
    
    {
        ! f [Game] to [Heap] : GameGetHeap(f, 0) = to <- GameFirstHeap(f) = to.
        ! f [Game] i [LimitedInt] to [Heap] : GameGetHeap(f, i) = to <- ( ? to1 [Heap] : GameGetHeap(f, (i-1)) = to1 & GameNextHeap(f, to1) = to).
    }
    
    ! t [Time] : SDPointAt(t, play_3) => ( ?1 h [Heap] : ChosenHeap(t, h)).
    ! t [Time] h [Heap] : ChosenHeap(t, h) => (SDPointAt(t, play_3) & ( ? g [Game] st [StackLevel] n [LimitedInt] : (CurrentStackLevel(t) = st) & GameT(t, st, g) & GameandHeap(g, h) & HeapamountObjects(t, h, n) & ~(n = 0))).
    
    ! t [Time] : SDPointAt(t, play_4) => ( ?1 n [LimitedInt] : ChosenTake(t, n)).
    ! t [Time] n [LimitedInt] : ChosenTake(t, n) => (SDPointAt(t, play_4) & ( ? st [StackLevel] h [Heap] n1 [LimitedInt] : (CurrentStackLevel(t) = st) & HeapT(t, st, h) & HeapamountObjects(t, h, n1) & n >= 1 & n =< n1)).
    
    
    ! h [Heap] : ?1g [Game] : GameandHeap(g, h).
    ! g [Game] : ?>=1 h [Heap] : GameandHeap(g, h).
    
    ! g [Game] : ?1 n [LimitedInt] : I_GameturnOf(g, n).
    ! t [Time] g [Game] : ?1 n [LimitedInt] : GameturnOf(t, g, n).
    
    ! g [Game] : ?1 b [boolean] : I_Gamefinished(g, b).
    ! t [Time] g [Game] : ?1 b [boolean] : Gamefinished(t, g, b).
    
}

theory p1win:V {
    ? t [Time] g [Game] : Gamefinished(t, g, T) & GameturnOf(t, g, 0).
}

theory p2win:V {
    ? t [Time] g [Game] : Gamefinished(t, g, T) & GameturnOf(t, g, 1).
}

theory X:V {
    1 = 2.
}

structure S:V {
    Time = { 0..100 }
    Next = { 0->1; 1->2; 2->3; 3->4; 4->5; 5->6; 6->7; 7->8; 8->9; 9->10; 10->11; 11->12; 12->13; 13->14; 14->15; 15->16; 16->17; 17->18; 18->19; 19->20; 20->21; 21->22; 22->23; 23->24; 24->25; 25->26; 26->27; 27->28; 28->29; 29->30; 30->31; 31->32; 32->33; 33->34; 34->35; 35->36; 36->37; 37->38; 38->39; 39->40; 40->41; 41->42; 42->43; 43->44; 44->45; 45->46; 46->47; 47->48; 48->49; 49->50; 50->51; 51->52; 52->53; 53->54; 54->55; 55->56; 56->57; 57->58; 58->59; 59->60; 60->61; 61->62; 62->63; 63->64; 64->65; 65->66; 66->67; 67->68; 68->69; 69->70; 70->71; 71->72; 72->73; 73->74; 74->75; 75->76; 76->77; 77->78; 78->79; 79->80; 80->81; 81->82; 82->83; 83->84; 84->85; 85->86; 86->87; 87->88; 88->89; 89->90; 90->91; 91->92; 92->93; 93->94; 94->95; 95->96; 96->97; 97->98; 98->99; 99->100 }
    Start = 0
    I_CurrentStackLevel = 1
    
    LimitedInt = { -3..3 }
    
    NextSD = { play_1->play_2; play_2->play_3; play_3->play_4; play_4->play_5; play_5->play_6; play_7->finished  }
    
    Game = { Game1 }
    //Heap = { Heap1; Heap2; Heap3; Heap4; Heap5; Heap6; Heap7; Heap8; Heap9; Heap10}
    Heap = { Heap1; Heap2 }
    //GameandHeap = { Game1,Heap1; Game1,Heap2; Game1,Heap3; Game1,Heap4; Game1,Heap5; Game1,Heap6; Game1,Heap7; Game1,Heap8; Game1,Heap9; Game1,Heap10 }
    GameandHeap = { Game1,Heap1; Game1,Heap2 }
    GameFirstHeap = { Game1->Heap1 }
    GameNextHeap = { Game1,Heap1->Heap2 }
    
    //I_HeapamountObjects = { Heap1,10; Heap2,10; Heap3,10; Heap4,10; Heap5,10; Heap6,10; Heap7,10; Heap8,10; Heap9,10; Heap10,10 }
    I_HeapamountObjects = { Heap1,2; Heap2,2 }
    
    I_GameT = { 1,Game1 }
    I_Gamefinished = { Game1,F }
    I_GameturnOf = { Game1, 0 }
    I_PlayerNumT = { 1,0 }
    I_HeapT = {}
    I_TakeNumT = {}
    
    I_SDPointAt = { play_1 }
}

procedure main() {
    simulate_custom(T,S)
}

procedure simulate_custom(theory,structure,finishedsym,finishedvalue) {
    local backup = stdoptions.nbmodels
    stdoptions.nbmodels = 0
    local S_v = initialise(theory,structure)
    
    if #S_v ~= 0 then
        local stop = false
        while(not stop)
        do
            if #S_v > 1 then
                print("---------------------------------------------")
                print("0: stop")
                for i, v in ipairs(S_v)
                do
                    print("########")
                    print("State " .. i)
                    print(v)
                    print("########")
                end
                io.write("Please choose a number between 0 and " .. #S_v .. " (0 to stop) ")
                io.flush()
                local answer = io.read()
                answer = tonumber(answer)
                while (not (type(answer) == "number" and answer >= 0 and answer <= #S_v))
                do
                    io.write("Please choose a number between 0 and " .. #S_v .. " (0 to stop) ")
                    io.flush()
                    answer = io.read()
                    answer = tonumber(answer)
                end
                if answer == 0 then
                    print("Simulation will stop by user request")
                    stop = true
                else
                    print("Chosen state: ")
                    print(S_v[answer])
                    S_v = progress(theory, S_v[answer])
                end
            elseif #S_v == 1 then
                if finishedsym ~= nil then
                   local voc = getvocabulary(S_v[1])
                   if S_v[1][voc::finishedsym].ct(finishedvalue) then
                        print("End condition has been reached-the final state is: ")
                        print(S_v[1])
                        stop = true
                   else
                        S_v = progress(theory, S_v[1])
                   end
                else
                    S_v = progress(theory, S_v[1])
                end
            else
                print("There are no valid states-stopping simulation")
                stop = true
            end
        end
    else
        print("No valid initial state-stopping")
    end
    
    stdoptions.nbmodels = backup
    print("stopped")
}